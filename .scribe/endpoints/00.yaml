name: Authors
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/authors
    metadata:
      groupName: Authors
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of the authors.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success":true,"data":[{"id":1,"name":"ttesting update","bio":"no bio needed","birth_date":"2024-09-11"},{"id":2,"name":"Jakob Lynch","bio":"Alias aut qui culpa natus assumenda. Sit et omnis non eveniet et. Veritatis voluptate quos reprehenderit nisi cumque cum.","birth_date":"1990-05-19"},{"id":3,"name":"Dr. Guillermo Kirlin","bio":"Corrupti aut illum laudantium et sit. Quod consequatur necessitatibus error aut. Ad quas blanditiis cumque laborum consequatur repellendus.","birth_date":"1993-01-12"},{"id":4,"name":"Mr. Adalberto Maggio DDS","bio":"Et odit ullam beatae eveniet rerum quo. Et nisi ipsam omnis architecto voluptas. Eaque sint aut delectus quibusdam ea. Cumque quo fuga mollitia deserunt.","birth_date":"1973-10-09"},{"id":5,"name":"Koby Emard","bio":"Cum aliquid sequi cumque consequatur repellat est. Quae dolorem laudantium rerum voluptatibus amet. Corporis veritatis esse delectus perspiciatis non dolores rem.","birth_date":"2010-01-14"},{"id":6,"name":"Helmer Gislason","bio":"Cum reiciendis sint debitis earum. Porro voluptatem sed dolorem qui sit animi. Pariatur porro itaque a suscipit optio. Explicabo ratione ullam et unde ex omnis. Impedit ducimus soluta incidunt.","birth_date":"2020-10-11"},{"id":7,"name":"Mr. Alexis Fay V","bio":"Iusto tempore quas repellendus. Odio dolores at ipsam optio adipisci asperiores. Quas quibusdam consectetur ut soluta corporis maiores. Omnis sunt iusto aut impedit ipsa.","birth_date":"1990-12-11"},{"id":8,"name":"Jorge Ondricka","bio":"Eveniet ut temporibus ea quis voluptas ut aliquam. Est iusto molestias ut sed vero ratione et. Omnis iste qui porro error optio. Sunt voluptatem rerum voluptatem aut numquam blanditiis facere.","birth_date":"2022-07-18"},{"id":9,"name":"Prof. Kayley Borer","bio":"Corrupti animi nesciunt omnis aperiam. Aut voluptatem deserunt ut corporis recusandae id.","birth_date":"1976-10-01"}],"message":"List of all authors"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/authors/{id}'
    metadata:
      groupName: Authors
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified author.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The new name of the author.'
        required: false
        example: 'J.K. Rowling'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      bio:
        name: bio
        description: 'The new biography of the author.'
        required: false
        example: 'British author, best known for the Harry Potter series.'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      birth_date:
        name: birth_date
        description: 'The new birth date of the author.'
        required: false
        example: '1965-07-31'
        type: date
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      name: 'J.K. Rowling'
      bio: 'British author, best known for the Harry Potter series.'
      birth_date: '1965-07-31'
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"success":true,"data":{"id":1,"name":"ttesting update","bio":"no bio needed","birth_date":"2024-09-11"},"message":"Author retrieved"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/authors
    metadata:
      groupName: Authors
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created author in storage.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the author.'
        required: true
        example: 'J.K. Rowling'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      bio:
        name: bio
        description: 'optional The biography of the author.'
        required: false
        example: 'British author, best known for the Harry Potter series.'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      birth_date:
        name: birth_date
        description: 'optional The birth date of the author.'
        required: false
        example: '1965-07-31'
        type: date
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      name: 'J.K. Rowling'
      bio: 'British author, best known for the Harry Potter series.'
      birth_date: '1965-07-31'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/authors/{id}'
    metadata:
      groupName: Authors
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the specified author in storage.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must not be greater than 255 characters.'
        required: true
        example: zps
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      bio:
        name: bio
        description: ''
        required: false
        example: rem
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      birth_date:
        name: birth_date
        description: 'Must be a valid date.'
        required: false
        example: '2024-09-11T08:32:48'
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      name: zps
      bio: rem
      birth_date: '2024-09-11T08:32:48'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Author successfully deleted"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/authors/{id}'
    metadata:
      groupName: Authors
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified author from storage.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Author successfully deleted"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
